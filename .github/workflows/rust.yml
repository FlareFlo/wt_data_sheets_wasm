name: Rust

on:
  push:
    branches: [ master, nightly ]
  pull_request:
    branches: [ master, nightly ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x]

    steps:
    
    # Prepares rustup for wasm compiler
    - name: Add wasm-target
      run: rustup target add wasm32-unknown-unknown
      
    # Pulls in git dependencies
    - uses: actions/checkout@v2
    - name: Pull git depends
      run : git submodule update --init --recursive
      
    # Builds wasm setup
    - name: Build
      run : cargo build --release --target wasm32-unknown-unknown
      
    # Prepares node js
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
        
    # Loads NPM modules for webpack
    - name: Install NPM depends
      run : npm install

    # Finishes bundle
    - name: Bundle + Build
      run: npm run build
      
    # Bundles release to zip
    - name: Easy Zip Files
      uses: vimtor/action-zip@v1
      with:
          files: dist/
          dest: dist.zip
          
    # Publishes bundle to repo
    - name: GH Release
      uses: softprops/action-gh-release@v0.1.14
      with:
          body: $GITHUB_SHA
          # Path to load note-worthy description of changes in release from
          # body_path: 
          # Gives the release a custom name. Defaults to tag name
          # name: # optional
          # Gives a tag name. Defaults to github.GITHUB_REF
          tag_name: $GITHUB_SHA
          # Creates a draft release. Defaults to false
          draft: false
          # Identify the release as a prerelease. Defaults to false
          prerelease: false
          # Newline-delimited list of path globs for asset files to upload
          files: dist.zip
          # Fails if any of the `files` globs match nothing. Defaults to false
          # fail_on_unmatched_files: # optional
          # Repository to make releases against, in <owner>/<repo> format
          # repository: # optional
          # Authorized secret GitHub Personal Access Token. Defaults to github.token
          # token: # optional, default is ${{ github.token }}
          # Commitish value that determines where the Git tag is created from. Can be any branch or commit SHA.
          # target_commitish: # optional
          # If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored.
          # discussion_category_name: # optional
          # Whether to automatically generate the name and body for this release. If name is specified, the specified name will be used; otherwise, a name will be automatically generated. If body is specified, the body will be pre-pended to the automatically generated notes.
          # generate_release_notes: # optional
